public class Chambre
{
    public int Numero { get; }
    public int Luminosite { get; set; }
    public string Nom { get; }
    public List<Mur> Murs { get; }
    public List<Oeuvre> Oeuvres { get; }

    public Chambre(string nom, int numero, int luminosite, List<Mur> murs)
    {
        Nom = nom;
        Numero = numero;
        Luminosite = luminosite;
        Murs = murs;
        Oeuvres = new List<Oeuvre>();
    }

    // Tente d'ajouter une ≈ìuvre √† une zone compatible, apr√®s v√©rification
    public void AjouterOeuvre(Oeuvre oeuvre)
    {
        if (!IsCompatible(oeuvre))
            throw new InvalidOperationException("≈íuvre incompatible.");

        var zonesPossibles = new List<(Mur murChoisi, Zone zoneChoisie)>();

        // Recherche des zones compatibles
        foreach (var mur in Murs)
        {
            foreach (var zone in mur.Zones)
            {
                if (zone.EstLibre && zone.EstCompatible(oeuvre))
                    zonesPossibles.Add((mur, zone));
            }
        }

        if (zonesPossibles.Count == 0)
            throw new InvalidOperationException("Aucune zone compatible disponible.");

        (Mur murChoisi, Zone zoneChoisie) selection;

        // S√©lection automatique si une seule zone compatible
        if (zonesPossibles.Count == 1)
        {
            selection = zonesPossibles[0];
            Console.WriteLine("‚úÖ Zone automatiquement s√©lectionn√©e.");
        }
        else
        {
            // Sinon, demander √† l'utilisateur de choisir une zone parmi plusieurs
            Console.WriteLine("\nüßê Plusieurs zones compatibles trouv√©es. Veuillez choisir :\n");

            for (int i = 0; i < zonesPossibles.Count; i++)
            {
                var (mur, zone) = zonesPossibles[i];
                int murIndex = Murs.IndexOf(mur);
                int zoneIndex = mur.Zones.IndexOf(zone);

                string type = zone is ZoneMurale ? "üñºÔ∏è ZoneMurale" :
                              zone is Vitrine ? "üè∫ Vitrine" : "‚ùî Inconnue";
                string extra = zone is Vitrine vitrine ? $" | capacit√© : {vitrine.CapaciteMax}kg" : "";

                Console.WriteLine($"[{i}] {type} sur mur {murIndex + 1}, zone {zoneIndex + 1} ({zone.Largeur}x{zone.Hauteur}){extra} | chambre #{Numero}");
            }

            int choix;
            do
            {
                Console.Write("\nVotre choix (entrez un num√©ro valide) : ");
            }
            while (!int.TryParse(Console.ReadLine(), out choix) || choix < 0 || choix >= zonesPossibles.Count);

            selection = zonesPossibles[choix];
        }

        // Marquer la zone comme occup√©e et enregistrer l‚Äô≈ìuvre
        selection.zoneChoisie.Occuper();
        oeuvre.Zone = selection.zoneChoisie;
        Oeuvres.Add(oeuvre);
    }

    // V√©rifie si la chambre peut accueillir l‚Äô≈ìuvre (sans afficher d'erreur)
    public bool IsCompatible(Oeuvre oeuvre)
    {
        if (oeuvre is Toile toile)
        {
            bool bonneLumiere = toile.ForteLumiere == (Luminosite > 5);
            if (!bonneLumiere) return false;

            CouleurMur couleurCible = toile.CouleurChaude ? CouleurMur.Chaude : CouleurMur.Froide;

            foreach (var mur in Murs)
            {
                if (mur.Couleur != couleurCible) continue;

                foreach (var zone in mur.Zones)
                {
                    if (zone.EstLibre && zone is ZoneMurale && zone.EstCompatible(toile))
                        return true;
                }
            }

            return false;
        }

        if (oeuvre is Antiquite)
        {
            foreach (var mur in Murs)
            {
                foreach (var zone in mur.Zones)
                {
                    if (zone.EstLibre && zone is Vitrine vitrine && vitrine.EstCompatible(oeuvre))
                        return true;
                }
            }

            return false;
        }

        return false;
    }

    // Version "d√©bogage" de la compatibilit√© : affiche les raisons du refus si besoin
    public bool IsCompatibleDebug(Oeuvre oeuvre)
    {
        Console.WriteLine($"\nüîé Chambre ¬´ {Nom} ¬ª (#{Numero})");

        if (oeuvre is Toile toile)
        {
            bool bonneLumiere = toile.ForteLumiere == (Luminosite > 5);
            bool couleurOK = false;
            bool tailleOK = false;

            foreach (var mur in Murs)
            {
                if (mur.Couleur == (toile.CouleurChaude ? CouleurMur.Chaude : CouleurMur.Froide))
                    couleurOK = true;

                foreach (var zone in mur.Zones)
                {
                    if (zone is ZoneMurale && zone.EstLibre &&
                        zone.Largeur >= toile.Largeur + 40 &&
                        zone.Hauteur >= toile.Hauteur + 40)
                        tailleOK = true;
                }
            }

            if (!bonneLumiere) Console.WriteLine("‚ùå Lumi√®re incompatible");
            if (!couleurOK) Console.WriteLine("‚ùå Couleur du mur incompatible");
            if (!tailleOK) Console.WriteLine("‚ùå Toile trop grande pour les zones murales");

            return bonneLumiere && couleurOK && tailleOK;
        }

        if (oeuvre is Antiquite antiq)
        {
            bool vitrineCompatible = false;
            bool vitrineExistante = false;
            bool vitrineTropPetite = false;

            foreach (var mur in Murs)
            {
                foreach (var zone in mur.Zones)
                {
                    if (zone is Vitrine vitrine && zone.EstLibre)
                    {
                        vitrineExistante = true;

                        if (vitrine.CapaciteMax >= antiq.Poids)
                            vitrineCompatible = true;
                        else
                            vitrineTropPetite = true;
                    }
                }
            }

            if (!vitrineCompatible)
            {
                if (!vitrineExistante)
                    Console.WriteLine("‚ùå Aucune vitrine disponible (occup√©e ou absente)");
                else if (vitrineTropPetite)
                    Console.WriteLine("‚ùå Trop lourd pour les vitrines de cette chambre");
            }

            return vitrineCompatible;
        }

        Console.WriteLine("‚ùå Type d‚Äô≈ìuvre non reconnu.");
        return false;
    }
}
